/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.flink.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ObservationTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6750873072607461545L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObservationTest\",\"namespace\":\"com.flink.schema\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Code\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null}]}]}],\"default\":null}]}],\"default\":null},{\"name\":\"effectivePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EffectivePeriod\",\"fields\":[{\"name\":\"end\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"Identifier\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"use\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null}]}]}],\"default\":null},{\"name\":\"interpretation\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"Interpretation\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"Coding\"]}],\"default\":null}]}]}],\"default\":null},{\"name\":\"issued\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"performer\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"Performer\",\"fields\":[{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null}]}]}],\"default\":null},{\"name\":\"referenceRange\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"record\",\"name\":\"ReferenceRange\",\"fields\":[{\"name\":\"high\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"High\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"low\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Low\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}]}],\"default\":null},{\"name\":\"resourceType\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subject\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Subject\",\"fields\":[{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Text\",\"fields\":[{\"name\":\"div\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"valueQuantity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ValueQuantity\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ObservationTest> ENCODER =
      new BinaryMessageEncoder<ObservationTest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ObservationTest> DECODER =
      new BinaryMessageDecoder<ObservationTest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ObservationTest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ObservationTest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ObservationTest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ObservationTest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ObservationTest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ObservationTest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ObservationTest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ObservationTest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.flink.schema.Code code;
  @Deprecated public com.flink.schema.EffectivePeriod effectivePeriod;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.util.List<com.flink.schema.Identifier> identifier;
  @Deprecated public java.util.List<com.flink.schema.Interpretation> interpretation;
  @Deprecated public java.lang.CharSequence issued;
  @Deprecated public java.util.List<com.flink.schema.Performer> performer;
  @Deprecated public java.util.List<com.flink.schema.ReferenceRange> referenceRange;
  @Deprecated public java.lang.CharSequence resourceType;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public com.flink.schema.Subject subject;
  @Deprecated public com.flink.schema.Text text;
  @Deprecated public com.flink.schema.ValueQuantity valueQuantity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObservationTest() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param effectivePeriod The new value for effectivePeriod
   * @param id The new value for id
   * @param identifier The new value for identifier
   * @param interpretation The new value for interpretation
   * @param issued The new value for issued
   * @param performer The new value for performer
   * @param referenceRange The new value for referenceRange
   * @param resourceType The new value for resourceType
   * @param status The new value for status
   * @param subject The new value for subject
   * @param text The new value for text
   * @param valueQuantity The new value for valueQuantity
   */
  public ObservationTest(com.flink.schema.Code code, com.flink.schema.EffectivePeriod effectivePeriod, java.lang.CharSequence id, java.util.List<com.flink.schema.Identifier> identifier, java.util.List<com.flink.schema.Interpretation> interpretation, java.lang.CharSequence issued, java.util.List<com.flink.schema.Performer> performer, java.util.List<com.flink.schema.ReferenceRange> referenceRange, java.lang.CharSequence resourceType, java.lang.CharSequence status, com.flink.schema.Subject subject, com.flink.schema.Text text, com.flink.schema.ValueQuantity valueQuantity) {
    this.code = code;
    this.effectivePeriod = effectivePeriod;
    this.id = id;
    this.identifier = identifier;
    this.interpretation = interpretation;
    this.issued = issued;
    this.performer = performer;
    this.referenceRange = referenceRange;
    this.resourceType = resourceType;
    this.status = status;
    this.subject = subject;
    this.text = text;
    this.valueQuantity = valueQuantity;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return effectivePeriod;
    case 2: return id;
    case 3: return identifier;
    case 4: return interpretation;
    case 5: return issued;
    case 6: return performer;
    case 7: return referenceRange;
    case 8: return resourceType;
    case 9: return status;
    case 10: return subject;
    case 11: return text;
    case 12: return valueQuantity;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (com.flink.schema.Code)value$; break;
    case 1: effectivePeriod = (com.flink.schema.EffectivePeriod)value$; break;
    case 2: id = (java.lang.CharSequence)value$; break;
    case 3: identifier = (java.util.List<com.flink.schema.Identifier>)value$; break;
    case 4: interpretation = (java.util.List<com.flink.schema.Interpretation>)value$; break;
    case 5: issued = (java.lang.CharSequence)value$; break;
    case 6: performer = (java.util.List<com.flink.schema.Performer>)value$; break;
    case 7: referenceRange = (java.util.List<com.flink.schema.ReferenceRange>)value$; break;
    case 8: resourceType = (java.lang.CharSequence)value$; break;
    case 9: status = (java.lang.CharSequence)value$; break;
    case 10: subject = (com.flink.schema.Subject)value$; break;
    case 11: text = (com.flink.schema.Text)value$; break;
    case 12: valueQuantity = (com.flink.schema.ValueQuantity)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public com.flink.schema.Code getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(com.flink.schema.Code value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'effectivePeriod' field.
   * @return The value of the 'effectivePeriod' field.
   */
  public com.flink.schema.EffectivePeriod getEffectivePeriod() {
    return effectivePeriod;
  }


  /**
   * Sets the value of the 'effectivePeriod' field.
   * @param value the value to set.
   */
  public void setEffectivePeriod(com.flink.schema.EffectivePeriod value) {
    this.effectivePeriod = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public java.util.List<com.flink.schema.Identifier> getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(java.util.List<com.flink.schema.Identifier> value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'interpretation' field.
   * @return The value of the 'interpretation' field.
   */
  public java.util.List<com.flink.schema.Interpretation> getInterpretation() {
    return interpretation;
  }


  /**
   * Sets the value of the 'interpretation' field.
   * @param value the value to set.
   */
  public void setInterpretation(java.util.List<com.flink.schema.Interpretation> value) {
    this.interpretation = value;
  }

  /**
   * Gets the value of the 'issued' field.
   * @return The value of the 'issued' field.
   */
  public java.lang.CharSequence getIssued() {
    return issued;
  }


  /**
   * Sets the value of the 'issued' field.
   * @param value the value to set.
   */
  public void setIssued(java.lang.CharSequence value) {
    this.issued = value;
  }

  /**
   * Gets the value of the 'performer' field.
   * @return The value of the 'performer' field.
   */
  public java.util.List<com.flink.schema.Performer> getPerformer() {
    return performer;
  }


  /**
   * Sets the value of the 'performer' field.
   * @param value the value to set.
   */
  public void setPerformer(java.util.List<com.flink.schema.Performer> value) {
    this.performer = value;
  }

  /**
   * Gets the value of the 'referenceRange' field.
   * @return The value of the 'referenceRange' field.
   */
  public java.util.List<com.flink.schema.ReferenceRange> getReferenceRange() {
    return referenceRange;
  }


  /**
   * Sets the value of the 'referenceRange' field.
   * @param value the value to set.
   */
  public void setReferenceRange(java.util.List<com.flink.schema.ReferenceRange> value) {
    this.referenceRange = value;
  }

  /**
   * Gets the value of the 'resourceType' field.
   * @return The value of the 'resourceType' field.
   */
  public java.lang.CharSequence getResourceType() {
    return resourceType;
  }


  /**
   * Sets the value of the 'resourceType' field.
   * @param value the value to set.
   */
  public void setResourceType(java.lang.CharSequence value) {
    this.resourceType = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public com.flink.schema.Subject getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(com.flink.schema.Subject value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public com.flink.schema.Text getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(com.flink.schema.Text value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'valueQuantity' field.
   * @return The value of the 'valueQuantity' field.
   */
  public com.flink.schema.ValueQuantity getValueQuantity() {
    return valueQuantity;
  }


  /**
   * Sets the value of the 'valueQuantity' field.
   * @param value the value to set.
   */
  public void setValueQuantity(com.flink.schema.ValueQuantity value) {
    this.valueQuantity = value;
  }

  /**
   * Creates a new ObservationTest RecordBuilder.
   * @return A new ObservationTest RecordBuilder
   */
  public static com.flink.schema.ObservationTest.Builder newBuilder() {
    return new com.flink.schema.ObservationTest.Builder();
  }

  /**
   * Creates a new ObservationTest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObservationTest RecordBuilder
   */
  public static com.flink.schema.ObservationTest.Builder newBuilder(com.flink.schema.ObservationTest.Builder other) {
    if (other == null) {
      return new com.flink.schema.ObservationTest.Builder();
    } else {
      return new com.flink.schema.ObservationTest.Builder(other);
    }
  }

  /**
   * Creates a new ObservationTest RecordBuilder by copying an existing ObservationTest instance.
   * @param other The existing instance to copy.
   * @return A new ObservationTest RecordBuilder
   */
  public static com.flink.schema.ObservationTest.Builder newBuilder(com.flink.schema.ObservationTest other) {
    if (other == null) {
      return new com.flink.schema.ObservationTest.Builder();
    } else {
      return new com.flink.schema.ObservationTest.Builder(other);
    }
  }

  /**
   * RecordBuilder for ObservationTest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObservationTest>
    implements org.apache.avro.data.RecordBuilder<ObservationTest> {

    private com.flink.schema.Code code;
    private com.flink.schema.Code.Builder codeBuilder;
    private com.flink.schema.EffectivePeriod effectivePeriod;
    private com.flink.schema.EffectivePeriod.Builder effectivePeriodBuilder;
    private java.lang.CharSequence id;
    private java.util.List<com.flink.schema.Identifier> identifier;
    private java.util.List<com.flink.schema.Interpretation> interpretation;
    private java.lang.CharSequence issued;
    private java.util.List<com.flink.schema.Performer> performer;
    private java.util.List<com.flink.schema.ReferenceRange> referenceRange;
    private java.lang.CharSequence resourceType;
    private java.lang.CharSequence status;
    private com.flink.schema.Subject subject;
    private com.flink.schema.Subject.Builder subjectBuilder;
    private com.flink.schema.Text text;
    private com.flink.schema.Text.Builder textBuilder;
    private com.flink.schema.ValueQuantity valueQuantity;
    private com.flink.schema.ValueQuantity.Builder valueQuantityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.flink.schema.ObservationTest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCodeBuilder()) {
        this.codeBuilder = com.flink.schema.Code.newBuilder(other.getCodeBuilder());
      }
      if (isValidValue(fields()[1], other.effectivePeriod)) {
        this.effectivePeriod = data().deepCopy(fields()[1].schema(), other.effectivePeriod);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasEffectivePeriodBuilder()) {
        this.effectivePeriodBuilder = com.flink.schema.EffectivePeriod.newBuilder(other.getEffectivePeriodBuilder());
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.identifier)) {
        this.identifier = data().deepCopy(fields()[3].schema(), other.identifier);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.interpretation)) {
        this.interpretation = data().deepCopy(fields()[4].schema(), other.interpretation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.issued)) {
        this.issued = data().deepCopy(fields()[5].schema(), other.issued);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.performer)) {
        this.performer = data().deepCopy(fields()[6].schema(), other.performer);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.referenceRange)) {
        this.referenceRange = data().deepCopy(fields()[7].schema(), other.referenceRange);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[8].schema(), other.resourceType);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.subject)) {
        this.subject = data().deepCopy(fields()[10].schema(), other.subject);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasSubjectBuilder()) {
        this.subjectBuilder = com.flink.schema.Subject.newBuilder(other.getSubjectBuilder());
      }
      if (isValidValue(fields()[11], other.text)) {
        this.text = data().deepCopy(fields()[11].schema(), other.text);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasTextBuilder()) {
        this.textBuilder = com.flink.schema.Text.newBuilder(other.getTextBuilder());
      }
      if (isValidValue(fields()[12], other.valueQuantity)) {
        this.valueQuantity = data().deepCopy(fields()[12].schema(), other.valueQuantity);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (other.hasValueQuantityBuilder()) {
        this.valueQuantityBuilder = com.flink.schema.ValueQuantity.newBuilder(other.getValueQuantityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ObservationTest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.flink.schema.ObservationTest other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      this.codeBuilder = null;
      if (isValidValue(fields()[1], other.effectivePeriod)) {
        this.effectivePeriod = data().deepCopy(fields()[1].schema(), other.effectivePeriod);
        fieldSetFlags()[1] = true;
      }
      this.effectivePeriodBuilder = null;
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.identifier)) {
        this.identifier = data().deepCopy(fields()[3].schema(), other.identifier);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.interpretation)) {
        this.interpretation = data().deepCopy(fields()[4].schema(), other.interpretation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.issued)) {
        this.issued = data().deepCopy(fields()[5].schema(), other.issued);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.performer)) {
        this.performer = data().deepCopy(fields()[6].schema(), other.performer);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.referenceRange)) {
        this.referenceRange = data().deepCopy(fields()[7].schema(), other.referenceRange);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[8].schema(), other.resourceType);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.subject)) {
        this.subject = data().deepCopy(fields()[10].schema(), other.subject);
        fieldSetFlags()[10] = true;
      }
      this.subjectBuilder = null;
      if (isValidValue(fields()[11], other.text)) {
        this.text = data().deepCopy(fields()[11].schema(), other.text);
        fieldSetFlags()[11] = true;
      }
      this.textBuilder = null;
      if (isValidValue(fields()[12], other.valueQuantity)) {
        this.valueQuantity = data().deepCopy(fields()[12].schema(), other.valueQuantity);
        fieldSetFlags()[12] = true;
      }
      this.valueQuantityBuilder = null;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public com.flink.schema.Code getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setCode(com.flink.schema.Code value) {
      validate(fields()[0], value);
      this.codeBuilder = null;
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'code' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flink.schema.Code.Builder getCodeBuilder() {
      if (codeBuilder == null) {
        if (hasCode()) {
          setCodeBuilder(com.flink.schema.Code.newBuilder(code));
        } else {
          setCodeBuilder(com.flink.schema.Code.newBuilder());
        }
      }
      return codeBuilder;
    }

    /**
     * Sets the Builder instance for the 'code' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flink.schema.ObservationTest.Builder setCodeBuilder(com.flink.schema.Code.Builder value) {
      clearCode();
      codeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'code' field has an active Builder instance
     * @return True if the 'code' field has an active Builder instance
     */
    public boolean hasCodeBuilder() {
      return codeBuilder != null;
    }

    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearCode() {
      code = null;
      codeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectivePeriod' field.
      * @return The value.
      */
    public com.flink.schema.EffectivePeriod getEffectivePeriod() {
      return effectivePeriod;
    }


    /**
      * Sets the value of the 'effectivePeriod' field.
      * @param value The value of 'effectivePeriod'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setEffectivePeriod(com.flink.schema.EffectivePeriod value) {
      validate(fields()[1], value);
      this.effectivePeriodBuilder = null;
      this.effectivePeriod = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'effectivePeriod' field has been set.
      * @return True if the 'effectivePeriod' field has been set, false otherwise.
      */
    public boolean hasEffectivePeriod() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'effectivePeriod' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flink.schema.EffectivePeriod.Builder getEffectivePeriodBuilder() {
      if (effectivePeriodBuilder == null) {
        if (hasEffectivePeriod()) {
          setEffectivePeriodBuilder(com.flink.schema.EffectivePeriod.newBuilder(effectivePeriod));
        } else {
          setEffectivePeriodBuilder(com.flink.schema.EffectivePeriod.newBuilder());
        }
      }
      return effectivePeriodBuilder;
    }

    /**
     * Sets the Builder instance for the 'effectivePeriod' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flink.schema.ObservationTest.Builder setEffectivePeriodBuilder(com.flink.schema.EffectivePeriod.Builder value) {
      clearEffectivePeriod();
      effectivePeriodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'effectivePeriod' field has an active Builder instance
     * @return True if the 'effectivePeriod' field has an active Builder instance
     */
    public boolean hasEffectivePeriodBuilder() {
      return effectivePeriodBuilder != null;
    }

    /**
      * Clears the value of the 'effectivePeriod' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearEffectivePeriod() {
      effectivePeriod = null;
      effectivePeriodBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public java.util.List<com.flink.schema.Identifier> getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setIdentifier(java.util.List<com.flink.schema.Identifier> value) {
      validate(fields()[3], value);
      this.identifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'interpretation' field.
      * @return The value.
      */
    public java.util.List<com.flink.schema.Interpretation> getInterpretation() {
      return interpretation;
    }


    /**
      * Sets the value of the 'interpretation' field.
      * @param value The value of 'interpretation'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setInterpretation(java.util.List<com.flink.schema.Interpretation> value) {
      validate(fields()[4], value);
      this.interpretation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'interpretation' field has been set.
      * @return True if the 'interpretation' field has been set, false otherwise.
      */
    public boolean hasInterpretation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'interpretation' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearInterpretation() {
      interpretation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'issued' field.
      * @return The value.
      */
    public java.lang.CharSequence getIssued() {
      return issued;
    }


    /**
      * Sets the value of the 'issued' field.
      * @param value The value of 'issued'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setIssued(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.issued = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'issued' field has been set.
      * @return True if the 'issued' field has been set, false otherwise.
      */
    public boolean hasIssued() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'issued' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearIssued() {
      issued = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'performer' field.
      * @return The value.
      */
    public java.util.List<com.flink.schema.Performer> getPerformer() {
      return performer;
    }


    /**
      * Sets the value of the 'performer' field.
      * @param value The value of 'performer'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setPerformer(java.util.List<com.flink.schema.Performer> value) {
      validate(fields()[6], value);
      this.performer = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'performer' field has been set.
      * @return True if the 'performer' field has been set, false otherwise.
      */
    public boolean hasPerformer() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'performer' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearPerformer() {
      performer = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'referenceRange' field.
      * @return The value.
      */
    public java.util.List<com.flink.schema.ReferenceRange> getReferenceRange() {
      return referenceRange;
    }


    /**
      * Sets the value of the 'referenceRange' field.
      * @param value The value of 'referenceRange'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setReferenceRange(java.util.List<com.flink.schema.ReferenceRange> value) {
      validate(fields()[7], value);
      this.referenceRange = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceRange' field has been set.
      * @return True if the 'referenceRange' field has been set, false otherwise.
      */
    public boolean hasReferenceRange() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'referenceRange' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearReferenceRange() {
      referenceRange = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'resourceType' field.
      * @return The value.
      */
    public java.lang.CharSequence getResourceType() {
      return resourceType;
    }


    /**
      * Sets the value of the 'resourceType' field.
      * @param value The value of 'resourceType'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setResourceType(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.resourceType = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceType' field has been set.
      * @return True if the 'resourceType' field has been set, false otherwise.
      */
    public boolean hasResourceType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'resourceType' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearResourceType() {
      resourceType = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.status = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearStatus() {
      status = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public com.flink.schema.Subject getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setSubject(com.flink.schema.Subject value) {
      validate(fields()[10], value);
      this.subjectBuilder = null;
      this.subject = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'subject' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flink.schema.Subject.Builder getSubjectBuilder() {
      if (subjectBuilder == null) {
        if (hasSubject()) {
          setSubjectBuilder(com.flink.schema.Subject.newBuilder(subject));
        } else {
          setSubjectBuilder(com.flink.schema.Subject.newBuilder());
        }
      }
      return subjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'subject' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flink.schema.ObservationTest.Builder setSubjectBuilder(com.flink.schema.Subject.Builder value) {
      clearSubject();
      subjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'subject' field has an active Builder instance
     * @return True if the 'subject' field has an active Builder instance
     */
    public boolean hasSubjectBuilder() {
      return subjectBuilder != null;
    }

    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearSubject() {
      subject = null;
      subjectBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public com.flink.schema.Text getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setText(com.flink.schema.Text value) {
      validate(fields()[11], value);
      this.textBuilder = null;
      this.text = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'text' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flink.schema.Text.Builder getTextBuilder() {
      if (textBuilder == null) {
        if (hasText()) {
          setTextBuilder(com.flink.schema.Text.newBuilder(text));
        } else {
          setTextBuilder(com.flink.schema.Text.newBuilder());
        }
      }
      return textBuilder;
    }

    /**
     * Sets the Builder instance for the 'text' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flink.schema.ObservationTest.Builder setTextBuilder(com.flink.schema.Text.Builder value) {
      clearText();
      textBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'text' field has an active Builder instance
     * @return True if the 'text' field has an active Builder instance
     */
    public boolean hasTextBuilder() {
      return textBuilder != null;
    }

    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearText() {
      text = null;
      textBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueQuantity' field.
      * @return The value.
      */
    public com.flink.schema.ValueQuantity getValueQuantity() {
      return valueQuantity;
    }


    /**
      * Sets the value of the 'valueQuantity' field.
      * @param value The value of 'valueQuantity'.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder setValueQuantity(com.flink.schema.ValueQuantity value) {
      validate(fields()[12], value);
      this.valueQuantityBuilder = null;
      this.valueQuantity = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'valueQuantity' field has been set.
      * @return True if the 'valueQuantity' field has been set, false otherwise.
      */
    public boolean hasValueQuantity() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'valueQuantity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.flink.schema.ValueQuantity.Builder getValueQuantityBuilder() {
      if (valueQuantityBuilder == null) {
        if (hasValueQuantity()) {
          setValueQuantityBuilder(com.flink.schema.ValueQuantity.newBuilder(valueQuantity));
        } else {
          setValueQuantityBuilder(com.flink.schema.ValueQuantity.newBuilder());
        }
      }
      return valueQuantityBuilder;
    }

    /**
     * Sets the Builder instance for the 'valueQuantity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.flink.schema.ObservationTest.Builder setValueQuantityBuilder(com.flink.schema.ValueQuantity.Builder value) {
      clearValueQuantity();
      valueQuantityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'valueQuantity' field has an active Builder instance
     * @return True if the 'valueQuantity' field has an active Builder instance
     */
    public boolean hasValueQuantityBuilder() {
      return valueQuantityBuilder != null;
    }

    /**
      * Clears the value of the 'valueQuantity' field.
      * @return This builder.
      */
    public com.flink.schema.ObservationTest.Builder clearValueQuantity() {
      valueQuantity = null;
      valueQuantityBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ObservationTest build() {
      try {
        ObservationTest record = new ObservationTest();
        if (codeBuilder != null) {
          try {
            record.code = this.codeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("code"));
            throw e;
          }
        } else {
          record.code = fieldSetFlags()[0] ? this.code : (com.flink.schema.Code) defaultValue(fields()[0]);
        }
        if (effectivePeriodBuilder != null) {
          try {
            record.effectivePeriod = this.effectivePeriodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("effectivePeriod"));
            throw e;
          }
        } else {
          record.effectivePeriod = fieldSetFlags()[1] ? this.effectivePeriod : (com.flink.schema.EffectivePeriod) defaultValue(fields()[1]);
        }
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.identifier = fieldSetFlags()[3] ? this.identifier : (java.util.List<com.flink.schema.Identifier>) defaultValue(fields()[3]);
        record.interpretation = fieldSetFlags()[4] ? this.interpretation : (java.util.List<com.flink.schema.Interpretation>) defaultValue(fields()[4]);
        record.issued = fieldSetFlags()[5] ? this.issued : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.performer = fieldSetFlags()[6] ? this.performer : (java.util.List<com.flink.schema.Performer>) defaultValue(fields()[6]);
        record.referenceRange = fieldSetFlags()[7] ? this.referenceRange : (java.util.List<com.flink.schema.ReferenceRange>) defaultValue(fields()[7]);
        record.resourceType = fieldSetFlags()[8] ? this.resourceType : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.status = fieldSetFlags()[9] ? this.status : (java.lang.CharSequence) defaultValue(fields()[9]);
        if (subjectBuilder != null) {
          try {
            record.subject = this.subjectBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("subject"));
            throw e;
          }
        } else {
          record.subject = fieldSetFlags()[10] ? this.subject : (com.flink.schema.Subject) defaultValue(fields()[10]);
        }
        if (textBuilder != null) {
          try {
            record.text = this.textBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("text"));
            throw e;
          }
        } else {
          record.text = fieldSetFlags()[11] ? this.text : (com.flink.schema.Text) defaultValue(fields()[11]);
        }
        if (valueQuantityBuilder != null) {
          try {
            record.valueQuantity = this.valueQuantityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("valueQuantity"));
            throw e;
          }
        } else {
          record.valueQuantity = fieldSetFlags()[12] ? this.valueQuantity : (com.flink.schema.ValueQuantity) defaultValue(fields()[12]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ObservationTest>
    WRITER$ = (org.apache.avro.io.DatumWriter<ObservationTest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ObservationTest>
    READER$ = (org.apache.avro.io.DatumReader<ObservationTest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.code.customEncode(out);
    }

    if (this.effectivePeriod == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.effectivePeriod.customEncode(out);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.identifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.identifier.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.flink.schema.Identifier e0: this.identifier) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e0.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.interpretation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.interpretation.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (com.flink.schema.Interpretation e1: this.interpretation) {
        actualSize1++;
        out.startItem();
        if (e1 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e1.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.issued == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.issued);
    }

    if (this.performer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.performer.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (com.flink.schema.Performer e2: this.performer) {
        actualSize2++;
        out.startItem();
        if (e2 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e2.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.referenceRange == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.referenceRange.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (com.flink.schema.ReferenceRange e3: this.referenceRange) {
        actualSize3++;
        out.startItem();
        if (e3 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          e3.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.resourceType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.resourceType);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.subject == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.subject.customEncode(out);
    }

    if (this.text == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.text.customEncode(out);
    }

    if (this.valueQuantity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.valueQuantity.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        if (this.code == null) {
          this.code = new com.flink.schema.Code();
        }
        this.code.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.effectivePeriod = null;
      } else {
        if (this.effectivePeriod == null) {
          this.effectivePeriod = new com.flink.schema.EffectivePeriod();
        }
        this.effectivePeriod.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.identifier = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.flink.schema.Identifier> a0 = this.identifier;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.flink.schema.Identifier>((int)size0, SCHEMA$.getField("identifier").schema().getTypes().get(1));
          this.identifier = a0;
        } else a0.clear();
        SpecificData.Array<com.flink.schema.Identifier> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Identifier>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.flink.schema.Identifier e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e0 = null;
            } else {
              if (e0 == null) {
                e0 = new com.flink.schema.Identifier();
              }
              e0.customDecode(in);
            }
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.interpretation = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<com.flink.schema.Interpretation> a1 = this.interpretation;
        if (a1 == null) {
          a1 = new SpecificData.Array<com.flink.schema.Interpretation>((int)size1, SCHEMA$.getField("interpretation").schema().getTypes().get(1));
          this.interpretation = a1;
        } else a1.clear();
        SpecificData.Array<com.flink.schema.Interpretation> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Interpretation>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            com.flink.schema.Interpretation e1 = (ga1 != null ? ga1.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e1 = null;
            } else {
              if (e1 == null) {
                e1 = new com.flink.schema.Interpretation();
              }
              e1.customDecode(in);
            }
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.issued = null;
      } else {
        this.issued = in.readString(this.issued instanceof Utf8 ? (Utf8)this.issued : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.performer = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<com.flink.schema.Performer> a2 = this.performer;
        if (a2 == null) {
          a2 = new SpecificData.Array<com.flink.schema.Performer>((int)size2, SCHEMA$.getField("performer").schema().getTypes().get(1));
          this.performer = a2;
        } else a2.clear();
        SpecificData.Array<com.flink.schema.Performer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Performer>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            com.flink.schema.Performer e2 = (ga2 != null ? ga2.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e2 = null;
            } else {
              if (e2 == null) {
                e2 = new com.flink.schema.Performer();
              }
              e2.customDecode(in);
            }
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.referenceRange = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<com.flink.schema.ReferenceRange> a3 = this.referenceRange;
        if (a3 == null) {
          a3 = new SpecificData.Array<com.flink.schema.ReferenceRange>((int)size3, SCHEMA$.getField("referenceRange").schema().getTypes().get(1));
          this.referenceRange = a3;
        } else a3.clear();
        SpecificData.Array<com.flink.schema.ReferenceRange> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.ReferenceRange>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            com.flink.schema.ReferenceRange e3 = (ga3 != null ? ga3.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e3 = null;
            } else {
              if (e3 == null) {
                e3 = new com.flink.schema.ReferenceRange();
              }
              e3.customDecode(in);
            }
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.resourceType = null;
      } else {
        this.resourceType = in.readString(this.resourceType instanceof Utf8 ? (Utf8)this.resourceType : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subject = null;
      } else {
        if (this.subject == null) {
          this.subject = new com.flink.schema.Subject();
        }
        this.subject.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.text = null;
      } else {
        if (this.text == null) {
          this.text = new com.flink.schema.Text();
        }
        this.text.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.valueQuantity = null;
      } else {
        if (this.valueQuantity == null) {
          this.valueQuantity = new com.flink.schema.ValueQuantity();
        }
        this.valueQuantity.customDecode(in);
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            if (this.code == null) {
              this.code = new com.flink.schema.Code();
            }
            this.code.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.effectivePeriod = null;
          } else {
            if (this.effectivePeriod == null) {
              this.effectivePeriod = new com.flink.schema.EffectivePeriod();
            }
            this.effectivePeriod.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.identifier = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.flink.schema.Identifier> a0 = this.identifier;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.flink.schema.Identifier>((int)size0, SCHEMA$.getField("identifier").schema().getTypes().get(1));
              this.identifier = a0;
            } else a0.clear();
            SpecificData.Array<com.flink.schema.Identifier> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Identifier>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.flink.schema.Identifier e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e0 = null;
                } else {
                  if (e0 == null) {
                    e0 = new com.flink.schema.Identifier();
                  }
                  e0.customDecode(in);
                }
                a0.add(e0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.interpretation = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<com.flink.schema.Interpretation> a1 = this.interpretation;
            if (a1 == null) {
              a1 = new SpecificData.Array<com.flink.schema.Interpretation>((int)size1, SCHEMA$.getField("interpretation").schema().getTypes().get(1));
              this.interpretation = a1;
            } else a1.clear();
            SpecificData.Array<com.flink.schema.Interpretation> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Interpretation>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                com.flink.schema.Interpretation e1 = (ga1 != null ? ga1.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e1 = null;
                } else {
                  if (e1 == null) {
                    e1 = new com.flink.schema.Interpretation();
                  }
                  e1.customDecode(in);
                }
                a1.add(e1);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.issued = null;
          } else {
            this.issued = in.readString(this.issued instanceof Utf8 ? (Utf8)this.issued : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.performer = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<com.flink.schema.Performer> a2 = this.performer;
            if (a2 == null) {
              a2 = new SpecificData.Array<com.flink.schema.Performer>((int)size2, SCHEMA$.getField("performer").schema().getTypes().get(1));
              this.performer = a2;
            } else a2.clear();
            SpecificData.Array<com.flink.schema.Performer> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.Performer>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                com.flink.schema.Performer e2 = (ga2 != null ? ga2.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e2 = null;
                } else {
                  if (e2 == null) {
                    e2 = new com.flink.schema.Performer();
                  }
                  e2.customDecode(in);
                }
                a2.add(e2);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.referenceRange = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<com.flink.schema.ReferenceRange> a3 = this.referenceRange;
            if (a3 == null) {
              a3 = new SpecificData.Array<com.flink.schema.ReferenceRange>((int)size3, SCHEMA$.getField("referenceRange").schema().getTypes().get(1));
              this.referenceRange = a3;
            } else a3.clear();
            SpecificData.Array<com.flink.schema.ReferenceRange> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<com.flink.schema.ReferenceRange>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                com.flink.schema.ReferenceRange e3 = (ga3 != null ? ga3.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e3 = null;
                } else {
                  if (e3 == null) {
                    e3 = new com.flink.schema.ReferenceRange();
                  }
                  e3.customDecode(in);
                }
                a3.add(e3);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.resourceType = null;
          } else {
            this.resourceType = in.readString(this.resourceType instanceof Utf8 ? (Utf8)this.resourceType : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subject = null;
          } else {
            if (this.subject == null) {
              this.subject = new com.flink.schema.Subject();
            }
            this.subject.customDecode(in);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.text = null;
          } else {
            if (this.text == null) {
              this.text = new com.flink.schema.Text();
            }
            this.text.customDecode(in);
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.valueQuantity = null;
          } else {
            if (this.valueQuantity == null) {
              this.valueQuantity = new com.flink.schema.ValueQuantity();
            }
            this.valueQuantity.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










